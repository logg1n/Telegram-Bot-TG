from dotenv import load_dotenv
import os
from pathlib import Path

from datetime import datetime

import aiohttp
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile

from gtts import gTTS
from googletrans import Translator


load_dotenv()
router: Router = Router()
translator = Translator()

WEATHER_KEY = os.getenv('WEATHER_KEY')

@router.message(CommandStart())
async def start(message: Message):
    await message.answer("Command Start")


@router.message(Command('help'))
async def help_command(message: Message):
    commands = await get_commands()
    await message.answer(f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {", ".join(commands)}')


@router.message(F.text.startswith('/weather'))
async def text_weather(message: Message):
    msg = message.text.strip().split()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞
    if len(msg) != 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /weather <–≥–æ—Ä–æ–¥>")
        return
    city = msg[-1]  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ /weather
    weather = await get_weather(city)
    await message.answer(weather)


# @router.message(F.text.startswith('/weatherv'))
@router.message(F.text.startswith('/voice'))
async def voice_weather(message: Message):
    msg = message.text.strip().split()

    if len(msg) != 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /voice <–≥–æ—Ä–æ–¥>")
        return

    city = msg[-1]
    weather = await get_weather(city)

    # –û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞
    tts = gTTS(text=weather, lang='ru')
    audio_path = f"temp/weather_{message.from_user.id}.mp3"
    tts.save(audio_path)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    audio = FSInputFile(audio_path)
    await message.answer_voice(audio)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    os.remove(audio_path)

@router.message(F.text)
async def translate_text(message: Message):
    msg = message.text
    lang = translator.detect(msg[:50])
    if lang.confidence:
        await message.answer("‚ö†Ô∏è –¢—Ä—É–¥–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç")

    await message.answer(translator.translate(msg, 'en').text)

@router.message(F.photo | F.document.mime_type.startswith("image/"))
async def save_any_image(message: Message):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    user_dir = Path(f"temp/img/user_{message.from_user.id}")
    user_dir.mkdir(parents=True, exist_ok=True)

    # –í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫: —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
    if message.photo:
        prefix = "photo"
        file = message.photo[-1]
        ext = "jpg"
        file_id = file.file_unique_id
    else:
        prefix = "image"
        file = message.document
        ext = file.file_name.split('.')[-1]
        file_id = file.file_unique_id

    file_name = f"{prefix}_{file_id}_{timestamp}.{ext}"
    save_path = user_dir / file_name

    await message.bot.download(file.file_id, destination=save_path)
    size_kb = os.path.getsize(save_path) / 1024

    await message.reply(
        f"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n"
        f"‚Ä¢ –ò–º—è: {file_name}\n"
        f"‚Ä¢ –†–∞–∑–º–µ—Ä: {size_kb:.2f} KB\n"
        f"‚Ä¢ –ü—É—Ç—å: {save_path}"
    )


async def get_weather(city):
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_KEY}&units=metric&lang=ru"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                weather_description = data['weather'][0]['description']
                temp = data['main']['temp']
                feels_like = data['main']['feels_like']
                humidity = data['main']['humidity']
                wind_speed = data['wind']['speed']

                reply = (
                    f"üå¶ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                    f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {weather_description.capitalize()}\n"
                    f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                    f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"‚Ä¢ –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å"
                )

                return reply
            else:
                error_data = await response.json()
                return f"‚ùå –û—à–∏–±–∫–∞: {error_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"


async def get_commands():
    return [
        '\n/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã',
        '\n/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
        '\n/weather <–≥–æ—Ä–æ–¥> - –ü–æ–≥–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–º',
        '\n/weatherv <–≥–æ—Ä–æ–¥> - –ü–æ–≥–æ–¥–∞ –≥–æ–ª–æ—Å–æ–º'
    ]